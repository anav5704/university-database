-- Vishant Kumar (S11230430) --
-- Anav Chand (S11221203) --
-- Rohan Nandan (S11234883) --
-- Zhixian Chen (S11230686) --

-- Query 1: List of all candidates and their qualifications --

SELECT CANDIDATE.CANDIDATE_CODE, CANDIDATE.CANDIDATE_FNAME, CANDIDATE.CANDIDATE_LNAME, QUALIFICATION.QUALIFICATION_DESCRIPTION
FROM CANDIDATE
LEFT JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
LEFT JOIN QUALIFICATION ON EDUCATION.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
ORDER BY QUALIFICATION.QUALIFICATION_DESCRIPTION ASC;

-- Query 2: List of companies that have employed candidates -- 

SELECT DISTINCT COMPANY.COMPANY_CODE, COMPANY.COMPANY_NAME
FROM COMPANY
INNER JOIN JOB_OPENING ON COMPANY.COMPANY_CODE = JOB_OPENING.COMPANY_CODE
INNER JOIN PLACEMENT ON JOB_OPENING.JOB_OPENING_CODE = PLACEMENT.JOB_OPENING_CODE
ORDER BY COMPANY.COMPANY_NAME ASC;

-- Query 3: List of candidate and company details with matching qualifications --

SELECT CANDIDATE.CANDIDATE_CODE, CANDIDATE.CANDIDATE_FNAME, CANDIDATE.CANDIDATE_LNAME, QUALIFICATION.QUALIFICATION_DESCRIPTION AS 
CANDIDATE_QUALIFICATION, COMPANY.COMPANY_NAME, JOB_OPENING.JOB_OPENING_DESCRIPTION, QUALIFICATION.QUALIFICATION_DESCRIPTION AS
COMPANY_REQUIRED_QUALIFICATION
FROM CANDIDATE
INNER JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
INNER JOIN QUALIFICATION ON EDUCATION.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
INNER JOIN PLACEMENT ON CANDIDATE.CANDIDATE_CODE = PLACEMENT.CANDIDATE_CODE
INNER JOIN JOB_OPENING ON PLACEMENT.JOB_OPENING_CODE = JOB_OPENING.JOB_OPENING_CODE
INNER JOIN COMPANY ON JOB_OPENING.COMPANY_CODE = COMPANY.COMPANY_CODE
INNER JOIN PREREQUISITE ON JOB_OPENING.QUALIFICATION_CODE = PREREQUISITE.QUALIFICATION_CODE
ORDER BY CANDIDATE.CANDIDATE_CODE ASC;

-- Query 4: Find candidates who need further education (don't have required qualification for their job) --

SELECT 
    CANDIDATE.CANDIDATE_CODE,
    CANDIDATE.CANDIDATE_FNAME,
    CANDIDATE.CANDIDATE_LNAME,
    COMPANY.COMPANY_NAME,
    JOB_OPENING.JOB_OPENING_DESCRIPTION,
    Q1.QUALIFICATION_DESCRIPTION AS CURRENT_QUALIFICATION,
    Q2.QUALIFICATION_DESCRIPTION AS REQUIRED_QUALIFICATION,
    COURSE.COURSE_DESCRIPTION,
    SESSION.SESSION_START_DATE,
    SESSION.SESSION_FEE,
    -- Calculate total cost of all required courses for this candidate
    (
        SELECT SUM(DISTINCT S.SESSION_FEE)
        FROM PLACEMENT P2
        INNER JOIN JOB_OPENING JO2 ON P2.JOB_OPENING_CODE = JO2.JOB_OPENING_CODE
        INNER JOIN EDUCATION E2 ON P2.CANDIDATE_CODE = E2.CANDIDATE_CODE
        INNER JOIN COURSE C2 ON JO2.QUALIFICATION_CODE = C2.QUALIFICATION_CODE
        INNER JOIN SESSION S ON C2.COURSE_CODE = S.COURSE_CODE
        WHERE P2.CANDIDATE_CODE = CANDIDATE.CANDIDATE_CODE
        AND E2.QUALIFICATION_CODE != JO2.QUALIFICATION_CODE
    ) AS TOTAL_COST
FROM CANDIDATE
INNER JOIN PLACEMENT ON CANDIDATE.CANDIDATE_CODE = PLACEMENT.CANDIDATE_CODE
INNER JOIN JOB_OPENING ON PLACEMENT.JOB_OPENING_CODE = JOB_OPENING.JOB_OPENING_CODE
INNER JOIN COMPANY ON JOB_OPENING.COMPANY_CODE = COMPANY.COMPANY_CODE
INNER JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
INNER JOIN QUALIFICATION Q1 ON EDUCATION.QUALIFICATION_CODE = Q1.QUALIFICATION_CODE
INNER JOIN QUALIFICATION Q2 ON JOB_OPENING.QUALIFICATION_CODE = Q2.QUALIFICATION_CODE
INNER JOIN COURSE ON JOB_OPENING.QUALIFICATION_CODE = COURSE.QUALIFICATION_CODE
INNER JOIN SESSION ON COURSE.COURSE_CODE = SESSION.COURSE_CODE
WHERE EDUCATION.QUALIFICATION_CODE != JOB_OPENING.QUALIFICATION_CODE
ORDER BY CANDIDATE.CANDIDATE_LNAME ASC;

-- Query 5: List of candidates who haven't paid their fees in full for the first quarter --

SELECT CANDIDATE.CANDIDATE_CODE, CANDIDATE.CANDIDATE_FNAME, CANDIDATE.CANDIDATE_LNAME,
SESSION.SESSION_CODE, SESSION.SESSION_FEE, ENROLLMENT.ENROLLMENT_FEE_PAYMENT,
(SESSION.SESSION_FEE - ENROLLMENT.ENROLLMENT_FEE_PAYMENT) AS BALANCE_DUE, ENROLLMENT.ENROLLMENT_DATE
FROM CANDIDATE
INNER JOIN ENROLLMENT ON CANDIDATE.CANDIDATE_CODE = ENROLLMENT.CANDIDATE_CODE
INNER JOIN SESSION ON ENROLLMENT.SESSION_CODE = SESSION.SESSION_CODE
WHERE ENROLLMENT.ENROLLMENT_FEE_PAYMENT < SESSION.SESSION_FEE AND ENROLLMENT.ENROLLMENT_DATE BETWEEN '2025-01-01' AND '2025-03-31';

-- Query 6: List and total number of candidates shortlisted for each opening --

SELECT COMPANY.COMPANY_NAME AS Company, JOB_OPENING.JOB_OPENING_DESCRIPTION AS Job_Opening,
QUALIFICATION.QUALIFICATION_DESCRIPTION AS Required_Qualification,
GROUP_CONCAT( CONCAT(CANDIDATE.CANDIDATE_FNAME, ' ', CANDIDATE.CANDIDATE_LNAME)
ORDER BY CANDIDATE.CANDIDATE_LNAME SEPARATOR ', ' ) AS Available_Candidates,
COUNT(DISTINCT CANDIDATE.CANDIDATE_CODE) AS Total_Available
FROM COMPANY
INNER JOIN JOB_OPENING ON COMPANY.COMPANY_CODE = JOB_OPENING.COMPANY_CODE
INNER JOIN QUALIFICATION ON JOB_OPENING.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
INNER JOIN EDUCATION ON QUALIFICATION.QUALIFICATION_CODE = EDUCATION.QUALIFICATION_CODE
INNER JOIN CANDIDATE ON EDUCATION.CANDIDATE_CODE = CANDIDATE.CANDIDATE_CODE
WHERE JOB_OPENING.JOB_OPENING_AVAILABILITY_STATUS = 'Open'
GROUP BY COMPANY.COMPANY_NAME, JOB_OPENING.JOB_OPENING_DESCRIPTION, QUALIFICATION.QUALIFICATION_DESCRIPTION
ORDER BY COMPANY.COMPANY_NAME, JOB_OPENING.JOB_OPENING_DESCRIPTION;

-- Query 7: Qualifications needed for openings with average pay --

SELECT COMPANY.COMPANY_NAME, QUALIFICATION.QUALIFICATION_DESCRIPTION,
AVG(JOB_OPENING.JOB_OPENING_SALARY) AS AVERAGE_OPENING_PAY
FROM COMPANY
INNER JOIN JOB_OPENING ON COMPANY.COMPANY_CODE = JOB_OPENING.COMPANY_CODE
INNER JOIN QUALIFICATION ON JOB_OPENING.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
GROUP BY COMPANY.COMPANY_NAME, QUALIFICATION.QUALIFICATION_DESCRIPTION
ORDER BY AVERAGE_OPENING_PAY ASC;
