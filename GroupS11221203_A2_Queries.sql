-- Vishant Kumar (S11230430) --
-- Anav Chand (S11221203) --
-- Rohan Nandan (S11234883) --
-- Zhixian Chen (S11230686) --

-- Query 1: List of all candidates and their qualifications --

SELECT CANDIDATE.CANDIDATE_CODE, CANDIDATE.CANDIDATE_FNAME, CANDIDATE.CANDIDATE_LNAME, QUALIFICATION.QUALIFICATION_DESCRIPTION
FROM CANDIDATE
LEFT JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
LEFT JOIN QUALIFICATION ON EDUCATION.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
ORDER BY QUALIFICATION.QUALIFICATION_DESCRIPTION ASC;

-- Query 2: List of companies that have employed candidates -- 

SELECT DISTINCT COMPANY.COMPANY_CODE, COMPANY.COMPANY_NAME
FROM COMPANY
INNER JOIN JOB_OPENING ON COMPANY.COMPANY_CODE = JOB_OPENING.COMPANY_CODE
INNER JOIN PLACEMENT ON JOB_OPENING.JOB_OPENING_CODE = PLACEMENT.JOB_OPENING_CODE
ORDER BY COMPANY.COMPANY_NAME ASC;

-- Query 3: List of candidate and company details with matching qualifications --

SELECT CANDIDATE.CANDIDATE_CODE, CANDIDATE.CANDIDATE_FNAME, CANDIDATE.CANDIDATE_LNAME, QUALIFICATION.QUALIFICATION_DESCRIPTION AS 
CANDIDATE_QUALIFICATION, COMPANY.COMPANY_NAME, JOB_OPENING.JOB_OPENING_DESCRIPTION, QUALIFICATION.QUALIFICATION_DESCRIPTION AS
COMPANY_REQUIRED_QUALIFICATION
FROM CANDIDATE
INNER JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
INNER JOIN QUALIFICATION ON EDUCATION.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
INNER JOIN PLACEMENT ON CANDIDATE.CANDIDATE_CODE = PLACEMENT.CANDIDATE_CODE
INNER JOIN JOB_OPENING ON PLACEMENT.JOB_OPENING_CODE = JOB_OPENING.JOB_OPENING_CODE
INNER JOIN COMPANY ON JOB_OPENING.COMPANY_CODE = COMPANY.COMPANY_CODE
INNER JOIN PREREQUISITE ON JOB_OPENING.QUALIFICATION_CODE = PREREQUISITE.QUALIFICATION_CODE
ORDER BY CANDIDATE.CANDIDATE_CODE ASC;

-- Query 4: Find candidates who need further education (don't have required qualification for their job) --

SELECT 
    CANDIDATE.CANDIDATE_CODE,
    CANDIDATE.CANDIDATE_FNAME, 
    CANDIDATE.CANDIDATE_LNAME, 
    COURSE.COURSE_DESCRIPTION,
    SESSION.SESSION_START_DATE,
    SESSION.SESSION_FEE,
    (
        SELECT SUM(SESSION.SESSION_FEE) 
        FROM SESSION
        INNER JOIN COURSE ON SESSION.COURSE_CODE = COURSE.COURSE_CODE
        WHERE COURSE.QUALIFICATION_CODE = JOB_OPENING.QUALIFICATION_CODE
    ) AS TOTAL_COST
FROM CANDIDATE
INNER JOIN PLACEMENT ON CANDIDATE.CANDIDATE_CODE = PLACEMENT.CANDIDATE_CODE
INNER JOIN JOB_OPENING ON PLACEMENT.JOB_OPENING_CODE = JOB_OPENING.JOB_OPENING_CODE
INNER JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
INNER JOIN COURSE ON JOB_OPENING.QUALIFICATION_CODE = COURSE.QUALIFICATION_CODE
INNER JOIN SESSION ON COURSE.COURSE_CODE = SESSION.COURSE_CODE
WHERE EDUCATION.QUALIFICATION_CODE != JOB_OPENING.QUALIFICATION_CODE
ORDER BY CANDIDATE.CANDIDATE_LNAME ASC;

-- Query 5: List of candidates who haven't paid their fees in full for the first quarter --

SELECT C.CANDIDATE_CODE, C.CANDIDATE_FNAME, C.CANDIDATE_LNAME, S.SESSION_CODE, S.SESSION_FEE, E.ENROLLMENT_FEE_PAYMENT, E.ENROLLMENT_DATE,
(S.SESSION_FEE - E.ENROLLMENT_FEE_PAYMENT) AS BALANCE_LEFT
FROM CANDIDATE AS C
INNER JOIN Enrollment AS E ON C.CANDIDATE_CODE = E.CANDIDATE_CODE
INNER JOIN Session AS S ON E.SESSION_CODE = S.SESSION_CODE
WHERE E.ENROLLMENT_FEE_PAYMENT < S.SESSION_FEE AND E.ENROLLMENT_DATE BETWEEN '2025-01-01' AND '2025-03-31';

-- Query 6: List and total number of candidates shortlisted for each opening --

SELECT 
    CMP.COMPANY_NAME AS COMPANY,
    JO.JOB_OPENING_DESCRIPTION AS JOB_OPENING,
    Q.QUALIFICATION_DESCRIPTION AS REQUIRED_QUALIFICATION,
    GROUP_CONCAT(
        CONCAT(CAND.CANDIDATE_FNAME, ' ', CAND.CANDIDATE_LNAME)
        ORDER BY CAND.CANDIDATE_LNAME
        SEPARATOR ', '
    ) AS AVAILABLE_CANDIDATES,
    COUNT(DISTINCT CAND.CANDIDATE_CODE) AS NUMBER_SHORTLISTED
FROM COMPANY CMP
INNER JOIN JOB_OPENING JO ON CMP.COMPANY_CODE = JO.COMPANY_CODE
INNER JOIN QUALIFICATION Q ON JO.QUALIFICATION_CODE = Q.QUALIFICATION_CODE
INNER JOIN EDUCATION E ON Q.QUALIFICATION_CODE = E.QUALIFICATION_CODE
INNER JOIN CANDIDATE CAND ON E.CANDIDATE_CODE = CAND.CANDIDATE_CODE
WHERE JO.JOB_OPENING_AVAILABILITY_STATUS = 'Open'
GROUP BY CMP.COMPANY_NAME, JO.JOB_OPENING_DESCRIPTION, Q.QUALIFICATION_DESCRIPTION
ORDER BY CMP.COMPANY_NAME, JO.JOB_OPENING_DESCRIPTION;

-- Query 7: Qualifications needed for openings with average pay --

SELECT COMPANY.COMPANY_NAME, QUALIFICATION.QUALIFICATION_DESCRIPTION,
AVG(SESSION.SESSION_FEE) AS AVERAGE_OPENING_PAY
FROM COMPANY
INNER JOIN JOB_OPENING ON COMPANY.COMPANY_CODE = JOB_OPENING.COMPANY_CODE
INNER JOIN PREREQUISITE ON JOB_OPENING.QUALIFICATION_CODE = PREREQUISITE.QUALIFICATION_CODE
INNER JOIN COURSE ON PREREQUISITE.COURSE_CODE = COURSE.COURSE_CODE
INNER JOIN SESSION ON COURSE.COURSE_CODE = SESSION.COURSE_CODE
INNER JOIN QUALIFICATION ON PREREQUISITE.QUALIFICATION_CODE = QUALIFICATION.QUALIFICATION_CODE
GROUP BY COMPANY.COMPANY_NAME, QUALIFICATION.QUALIFICATION_DESCRIPTION;
