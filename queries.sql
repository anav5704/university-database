-- Query 4
-- Find candidates who need further education (don't have required qualification for their job)
SELECT 
    CANDIDATE.CANDIDATE_CODE,
    CANDIDATE.CANDIDATE_FNAME, 
    CANDIDATE.CANDIDATE_LNAME, 
    COURSE.COURSE_DESCRIPTION,
    SESSION.SESSION_START_DATE,
    SESSION.SESSION_FEE,
    (
        SELECT SUM(SESSION.SESSION_FEE)
        FROM SESSION
        INNER JOIN COURSE ON SESSION.COURSE_CODE = COURSE.COURSE_CODE
        WHERE COURSE.QUALIFICATION_CODE = JOB_OPENING.QUALIFICATION_CODE
    ) AS Total_Cost
FROM CANDIDATE
INNER JOIN PLACEMENT ON CANDIDATE.CANDIDATE_CODE = PLACEMENT.CANDIDATE_CODE
INNER JOIN JOB_OPENING ON PLACEMENT.JOB_OPENING_CODE = JOB_OPENING.JOB_OPENING_CODE
INNER JOIN EDUCATION ON CANDIDATE.CANDIDATE_CODE = EDUCATION.CANDIDATE_CODE
INNER JOIN COURSE ON JOB_OPENING.QUALIFICATION_CODE = COURSE.QUALIFICATION_CODE
INNER JOIN SESSION ON COURSE.COURSE_CODE = SESSION.COURSE_CODE
WHERE EDUCATION.QUALIFICATION_CODE != JOB_OPENING.QUALIFICATION_CODE
ORDER BY CANDIDATE.CANDIDATE_LNAME ASC;

-- Query 5
-- Find candidates who have enrolled in sessions but haven't paid the full fee
SELECT 
    C.CANDIDATE_CODE,
    C.CANDIDATE_FNAME,
    C.CANDIDATE_LNAME,
    S.SESSION_CODE,
    S.SESSION_START_DATE,
    S.SESSION_FEE,
    E.ENROLLMENT_FEE_PAYMENT,
    (S.SESSION_FEE - E.ENROLLMENT_FEE_PAYMENT) AS BALANCE,
    E.ENROLLMENT_DATE
FROM CANDIDATE AS C
INNER JOIN ENROLLMENT AS E ON C.CANDIDATE_CODE = E.CANDIDATE_CODE
INNER JOIN SESSION AS S ON E.SESSION_CODE = S.SESSION_CODE
WHERE 
    S.SESSION_START_DATE BETWEEN '2025-01-01' AND '2025-03-31'
    AND (
        E.ENROLLMENT_FEE_PAYMENT IS NULL OR
        E.ENROLLMENT_FEE_PAYMENT < S.SESSION_FEE
    )
ORDER BY 
    C.CANDIDATE_LNAME,
    C.CANDIDATE_FNAME;

-- Query 6
-- Count successful placements by company and job opening
SELECT 
    CO.COMPANY_NAME AS Company,
    JO.JOB_OPENING_DESCRIPTION AS Job_Opening,
    Q.QUALIFICATION_DESCRIPTION AS Required_Qualification,
    COUNT(P.CANDIDATE_CODE) AS Successful_Placements
FROM COMPANY AS CO
INNER JOIN JOB_OPENING AS JO 
    ON CO.COMPANY_CODE = JO.COMPANY_CODE
INNER JOIN QUALIFICATION AS Q 
    ON JO.QUALIFICATION_CODE = Q.QUALIFICATION_CODE
LEFT JOIN PLACEMENT AS P 
    ON JO.JOB_OPENING_CODE = P.JOB_OPENING_CODE
GROUP BY 
    CO.COMPANY_NAME, 
    JO.JOB_OPENING_DESCRIPTION, 
    Q.QUALIFICATION_DESCRIPTION
ORDER BY 
    CO.COMPANY_NAME, 
    JO.JOB_OPENING_DESCRIPTION;

